{"version":3,"sources":["components/NavBar/index.js","components/Icon/index.js","App.js","index.js"],"names":["NavBar","props","className","class","message","score","Icon","onClick","clickedCharacter","id","alt","name","src","image","App","state","characters","clickedId","isClicked","i","length","setState","shuffle","newScore","push","array","temporaryValue","randomIndex","currentIndex","Math","floor","random","this","map","character","key","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"ytCAeeA,G,MATA,SAAAC,GAAK,OAChB,yBAAKC,UAAU,UACb,yBAAKC,MAAM,SAAX,sBACA,yBAAKA,MAAM,WAAWF,EAAMG,QAAQ,0EACpC,yBAAKD,MAAM,SAAX,UAA2BF,EAAMI,U,MCOxBC,MAZf,SAAcL,GACV,OACI,yBAAKC,UAAU,QACX,yBAAKA,UAAU,iBACX,0BAAMK,QAAS,kBAAMN,EAAMO,iBAAiBP,EAAMQ,KAAKP,UAAU,WAC7D,yBAAKQ,IAAKT,EAAMU,KAAMC,IAAKX,EAAMY,Y,OCyGtCC,G,kNAzGbC,MAAQ,CACNC,aACAC,UAAW,GACXZ,MAAO,EACPD,QAAS,wF,EAWXc,UAAY,SAACV,GACX,IAAK,IAAIW,EAAI,EAAGA,EAAI,EAAKJ,MAAME,UAAUG,OAAQD,IAC/C,GAAI,EAAKJ,MAAME,UAAUE,KAAOX,EAC9B,OAAO,EAGX,OAAO,G,EAITA,iBAAmB,SAAAC,GAEjB,IAAMD,EAAmBC,EAKzB,GAHuB,EAAKS,UAAUV,GAKpC,EAAKa,SAAS,CACZL,WAAY,EAAKM,QAAQ,EAAKP,MAAMC,YACpCC,UAAW,GACXZ,MAAO,EACPD,QAAS,yDAGN,CAEL,IAAImB,EAAW,EAAKR,MAAMV,MAAQ,EAE9BkB,IAAa,EAAKR,MAAMC,WAAWI,OAErC,EAAKC,SAAS,CACZL,WAAY,EAAKM,QAAQ,EAAKP,MAAMC,YACpCC,UAAW,GACXZ,MAAO,EACPD,QAAS,qCAKX,EAAKW,MAAME,UAAUO,KAAKhB,GAE1B,EAAKa,SAAS,CACZL,WAAY,EAAKM,QAAQ,EAAKP,MAAMC,YACpCX,MAAOkB,EACPnB,QAAS,iE,EAOjBkB,QAAU,SAACG,GAGT,IAFA,IAAiCC,EAAgBC,EAA7CC,EAAeH,EAAML,OAElB,IAAMQ,GACXD,EAAcE,KAAKC,MAAMD,KAAKE,SAAWH,GAEzCF,EAAiBD,EADjBG,GAAgB,GAEhBH,EAAMG,GAAgBH,EAAME,GAC5BF,EAAME,GAAeD,EAEvB,OAAOD,G,kEArEPO,KAAKX,SAAS,CACZL,WAAYgB,KAAKV,QAAQU,KAAKjB,MAAMC,gB,+BAwE9B,IAAD,OACP,OACE,6BAEE,kBAAC,EAAD,CAAQX,MAAO2B,KAAKjB,MAAMV,MAAOD,QAAS4B,KAAKjB,MAAMX,UACrD,yBAAKF,UAAU,eACb,yBAAKA,UAAU,QACZ8B,KAAKjB,MAAMC,WAAWiB,KAAI,SAAAC,GAAS,OAClC,kBAAC,EAAD,CACE1B,iBAAkB,EAAKA,iBACvBC,GAAIyB,EAAUzB,GACd0B,IAAKD,EAAUzB,GACfI,MAAOqB,EAAUrB,kB,GAlGfuB,cCAlBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.737a0122.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\n// This is called navbar but it's just the header, displaying the name and different messages depending on what the person clicks.\r\n//also includes their score\r\n\r\nconst NavBar = props =>  (\r\n    <nav className=\"navbar\">\r\n      <div class=\"title\">Lord of the Clicks</div>\r\n      <div class=\"message\">{props.message}<p>Try Not To Click The Same Character Twice!</p></div>\r\n      <div class=\"score\">Score: {props.score}</div>\r\n      </nav>\r\n  );\r\n\r\n\r\nexport default NavBar;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\n//Icon component displays the characters to be clicked\r\n\r\nfunction Icon(props) {\r\n    return (\r\n        <div className=\"card\">\r\n            <div className=\"img-container\">\r\n                <span onClick={() => props.clickedCharacter(props.id)} className=\"clicked\">\r\n                    <img alt={props.name} src={props.image} />\r\n                </span>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Icon;","import React, { Component } from 'react';\nimport NavBar from \"./components/NavBar/index\";\nimport Icon from \"./components/Icon/index\";\nimport characters from \"./characters.json\";\nimport './App.css';\n\nclass App extends Component {\n\n  //setting the states for characters, empty array, score, and message to display\n\n  state = {\n    characters,\n    clickedId: [],\n    score: 0,\n    message: \"One Ring To Rule Them All and In The Darkness Bind Them! Click A Character To Start.\"\n  };\n\n  //shuffles the character order\n  componentDidMount() {\n    this.setState({\n      characters: this.shuffle(this.state.characters)\n    });\n  }\n\n  //a function to tell whether or not that character has already been clicked\n  isClicked = (clickedCharacter) => {\n    for (let i = 0; i < this.state.clickedId.length; i++) {\n      if (this.state.clickedId[i] === clickedCharacter) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  //when a character is clicked, this function will run\n  clickedCharacter = id => {\n    //we taking the id of the character\n    const clickedCharacter = id;\n    //check to see if the character has been clicked\n    const hasBeenClicked = this.isClicked(clickedCharacter);\n\n    //if the character has been clicked\n    if (hasBeenClicked) {\n      //set the state - shuffle the characters, empty the array, put score to zero, and display message\n      this.setState({\n        characters: this.shuffle(this.state.characters),\n        clickedId: [],\n        score: 0,\n        message: \"One Does Not Simply Walk Into Mordor. Try Again.\"\n      })\n    //if character has not been clicked\n    } else {\n      //increment the score\n      let newScore = this.state.score + 1;\n      //if the score is equal to the amount of characters there are\n      if (newScore === this.state.characters.length) {\n        //set the state - shuffle the characters, empty array, set score back to zero, and display winning message\n        this.setState({\n          characters: this.shuffle(this.state.characters),\n          clickedId: [],\n          score: 0,\n          message: \"Middle-Earth is Saved! You Win!\"\n        });\n      //if the score is not equal to the amount of characters there are\n      } else {\n        //push the clicked character id to the empty array\n        this.state.clickedId.push(clickedCharacter);\n        //set the state - shuffle the characters, set the score to the new score, and display the message\n        this.setState({\n          characters: this.shuffle(this.state.characters),\n          score: newScore,\n          message: \"Correct! You're One Step Closer To Destroying The Ring...\"\n        });\n      }\n    }\n  };\n\n  //this is for shuffling the characters\n  shuffle = (array) => {\n    var currentIndex = array.length, temporaryValue, randomIndex;\n\n    while (0 !== currentIndex) {\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n    return array;\n  }\n\n  //here we are rendering elements to the DOM, including sending the score and message to the NavBar component\n  render() {\n    return (\n      <div>\n\n        <NavBar score={this.state.score} message={this.state.message} />\n        <div className=\"gridWrapper\">\n          <div className=\"grid\">\n            {this.state.characters.map(character => (\n              <Icon\n                clickedCharacter={this.clickedCharacter}\n                id={character.id}\n                key={character.id}\n                image={character.image}\n              />\n            ))}\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}